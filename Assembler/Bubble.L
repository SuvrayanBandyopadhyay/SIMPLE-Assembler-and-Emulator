00000000 00003C00 ldc arr0
00000001 00004703 stl begin
00000002 00004202 outer: ldl size
00000003 00004302 ldl i
00000004 00000007 sub 
00000005 0000350F brz end ; We check if i==size, (program is over)
00000006 00000000 ldc 0
00000007 00004403 stl j
00000008 00004202 inner: ldl size
00000009 00000100 ldc 1
0000000A 00000007 sub ; Store size -1
0000000B 00004302 ldl i ;store i
0000000C 00000007 sub ;Store size -1 -i
0000000D 00004402 ldl j ;Get j
0000000E 00000007 sub ; Subtract
0000000F 0000260F brz break ;Leave inner loop if they are equal
00000010 00002510 brlz break ; If somehow it becomes less than zero (Check values if this happens)
00000011 00004402 ldl j ; Get j 
00000012 00004702 ldl begin ;Get adress of array
00000013 00000006 add ; Get jth position address
00000014 00000004 ldnl 0 ;Load value 
00000015 00004503 stl temp1 ; Store value
00000016 00004402 ldl j ;Get j
00000017 00000100 ldc 1  ;Get 1
00000018 00000006 add ;Add
00000019 00004702 ldl begin 
0000001A 00000006 add ;Get j+1 th element
0000001B 00000004 ldnl 0 ;Load non local 
0000001C 00004603 stl temp2
0000001D 00004502 ldl temp1
0000001E 00004602 ldl temp2
0000001F 00000007 sub
00000020 00001010 brlz nochange
00000021 00004402 ldl j ; Get j 
00000022 00004702 ldl begin ;Get adress of array
00000023 00000006 add ; Get jth position address
00000024 00004803 stl addrtemp
00000025 00004602 ldl temp2
00000026 00004802 ldl addrtemp
00000027 00000005 stnl 0
00000028 00004402 ldl j ;Get j
00000029 00000100 ldc 1  ;Get 1
0000002A 00000006 add ;Add
0000002B 00004702 ldl begin 
0000002C 00000006 add ;Get j+1 th element
0000002D 00004803 stl addrtemp
0000002E 00004502 ldl temp1
0000002F 00004802 ldl addrtemp
00000030 00000005 stnl 0
00000031          nochange:
00000031 00004402 ldl j
00000032 00000100 ldc 1
00000033 00000006 add
00000034 00004403 stl j
00000035 FFFFD211 br inner
00000036          break:
00000036 00004302 ldl i
00000037 00000100 ldc 1
00000038 00000006 add
00000039 00004303 stl i
0000003A FFFFC711 br outer
0000003B          end:
0000003B 00000012 HALT
0000003C 00000007 arr0: data 7
0000003D 00000005 arr1: data 5
0000003E 00000002 arr2: data 2
0000003F 00000008 arr3: data 8
00000040 00000064 arr4: data 100
00000041 00000015 arr5: data 21
00000042 00000006 size: data 6
00000043 00000000 i: data 0
00000044 00000000 j: data 0
00000045 00000000 temp1: data 0
00000046 00000000 temp2: data 0
00000047 00000000 begin: data 0
00000048 00000000 addrtemp: data 0
